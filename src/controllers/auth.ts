import express from "express";
import bcrypt from "bcryptjs";
import dotenv from "dotenv";
import jwt from "jsonwebtoken";
import sgMail from "@sendgrid/mail";
import crypto from "crypto";
// Model & Type Imports
import User from "../models/user";
// import UserAccount from "../models/userAccount";
import { IUser, IUserAccount} from "../utils/InterfacesUsed";
import UserAccount from "../models/userAccount";


dotenv.config()

const router: express.Router = express.Router()

const SECRET: string = process.env.SECRET || ""

// Test Route
router.get("/", async (request: express.Request, response: express.Response) => {
    console.log(request.body)
    response.status(200).json({
        page: "AuthRouter",
        status: "Successfully Reached"
    })
})

router.post("/signup", async (request: express.Request, response: express.Response) => {
    try {
        // Just to have name in proper case
        request.body.name = request.body.name.toLowerCase().replace(/(?:^|\s|')\w/g, (m: string) => m.toUpperCase());
        // Hash password
        request.body.password = await bcrypt.hash(request.body.password, await bcrypt.genSalt(10))

        const userObject: IUser = {
            username: request.body.username.toLowerCase(),
            password: request.body.password,
            email: request.body.email.toLowerCase(),
            resetToken: "",
            resetTokenExpiry: new Date()
        }
        //generate user from received data
        const user: IUser = await User.create(userObject)

        const userAccountDetails: IUserAccount = {
            name: request.body.name,
            badgeName: request.body.badgeName,
            email: request.body.email.toLowerCase(),
            groupNames: [],
            currentTask: ["Contact Manager To Be Added To Group", "System"],
            adminOf: [],
            isSiteAdmin: false,
            isGroupAdmin: false,
            isScheduleAdmin: false
        }

        const newUserAccount = await UserAccount.create(userAccountDetails)

        response.status(200).json({message: "User Created",data:{user: user, accountData: newUserAccount}})

    } catch(error){
        response.status(400).json({
            message: "User Creation Failed",
            data: error
        })
    }
})

router.post("/login", async(request: express.Request, response: express.Response) => {
    try {
        request.body.username = request.body.username.toLowerCase()
        const {username, password} = request.body
        
        // Searching collection for username
        const user = await User.findOne({username})
        // If user exists checks for password
        if (user){
            const passwordCheck: boolean = await bcrypt.compare(password, user.password)
            if(passwordCheck){
                const payload: object = {username}
                const token = await jwt.sign(payload, SECRET)
                response.cookie("token", token, {
                    httpOnly: true,
                    path:"/",
                    sameSite: "none",
                    secure: request.hostname === "localhost" ? false : true
                }).json({payload, status: "logged in"})
            } else {
                response.status(400).json({
                    message: "Username/Password is incorrect",
                    status: "Failed Pass Check"
                })
            }
        } else {
            response.status(400).json({
                message: "Username/Password is incorrect",
                status: "Failed User Check"
            })
        }
        
    } catch(error) {
        response.status(400).json({
            message: "Failed to Login",
            data: error
        })
    }
})

router.put("/forgotpassword", async (request: express.Request, response: express.Response) => {
    try {
        request.body.email = request.body.email.toLowerCase()
        const user = await User.findOne({email: request.body.email})
        if(user) {
            // Used to generate random string and new time and store it
            const verificationString: string = crypto.randomBytes(32).toString("hex")
            user.resetToken = verificationString
            user.resetTokenExpiry = new Date()
            await User.findOneAndUpdate({email: request.body.email}, user)

            // Beginning of sending autogenerated email
            sgMail.setApiKey(process.env.SENDGRID_API_KEY || "")

            const msg = {
                to: request.body.email,
                from: "speedycheckin.automated@gmail.com",
                subject: "Speedy CheckIn Password Reset",
                text: "Password Reset Email",
                html: `<table class="m_nl-container" width="100%" border="0" cellpadding="0" cellspacing="0" role="presentation" style="background-color:#ffcb00"><tbody><tr><td><table class="m_row m_row-1" align="center" width="100%" border="0" cellpadding="0" cellspacing="0" role="presentation"><tbody><tr><td><table class="m_row-content m_stack" align="center" border="0" cellpadding="0" cellspacing="0" role="presentation" style="background-color:#fed149;color:#000;width:600px;margin:0 auto" width="600"><tbody><tr><td class="m_column m_column-1" width="100%" style="font-weight:400;text-align:left;padding-bottom:5px;padding-top:5px;vertical-align:top;border-top:0;border-right:0;border-bottom:0;border-left:0"><table class="m_text_block m_block-1" width="100%" border="0" cellpadding="10" cellspacing="0" role="presentation" style="word-break:break-word"><tbody><tr><td class="m_pad"><div style="font-family:sans-serif"><div style="font-size:14px;font-family:Tahoma,Verdana,Segoe,sans-serif;color:#555;line-height:1.2"><p style="margin:0;font-size:14px;text-align:center"><strong><span style="font-size:30px">Speedy Check-In Password Reset</span></strong>
                </p></div></div></td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table><table class="m_row m_row-2" align="center" width="100%" border="0" cellpadding="0" cellspacing="0" role="presentation" style="background-color:#fed149"><tbody><tr><td><table class="m_row-content m_stack" align="center" border="0" cellpadding="0" cellspacing="0" role="presentation" style="background-color:#fff;color:#000;width:600px;margin:0 auto" width="600"><tbody><tr><td class="m_column m_column-1" width="100%" style="font-weight:400;text-align:left;padding-top:5px;vertical-align:top;border-top:0;border-right:0;border-bottom:0;border-left:0"><table class="m_image_block m_block-1" width="100%" border="0" cellpadding="0" cellspacing="0" role="presentation">
                <tbody><tr><td class="m_pad" style="width:100%"><div class="m_alignment" align="center" style="line-height:10px"><img src="https://ci4.googleusercontent.com/proxy/XW7Tekh8vLrqtlb4tmWE8pxGu5s2-EzeB9gmYgUB4MOwZeTYnnCFZtW2Twxa0jNN6JLmq8or4G7e_vt5X4kefVfdJjM8D64ikCMrLR_5hepvWaahxdP_elTq9_OrtkIjhZ26bPus3pwLseE8jjH-hmsaYzXtaDGdUmBUawvL61aU6TKER1pwIHufNtEcNOoU9QOC1N-VG2ZZHo9iponrULGuijCWG6Wn0YLcyT8lQcxjKceyoQ83QOjfXGRnaFeLd4kVd8qAn9yzHuL4-v9L79Xc66VojOM47aZnPGD4DuesdBw_=s0-d-e1-ft#https://d15k2d11r6t6rl.cloudfront.net/public/users/Integrators/0db9f180-d222-4b2b-9371-cf9393bf4764/0bd8b69e-4024-4f26-9010-6e2a146401fb/Email%20Templates%20Assets%20Folder/PRTS01/promotion_tech_banner_01.jpg" style="display:block;height:auto;border:0;max-width:600px;width:100%" width="600" alt="Alternate text" title="Alternate text"></div></td></tr></tbody></table><table class="m_text_block m_block-2" width="100%" border="0" cellpadding="20" cellspacing="0" role="presentation" style="word-break:break-word"><tbody><tr><td class="m_pad"><div style="font-family:sans-serif"><div style="font-size:12px;font-family:Tahoma,Verdana,Segoe,sans-serif;color:#555;line-height:1.2"><p style="margin:0;font-size:14px;text-align:center">
                <strong><span style="font-size:30px">FORGOT</span></strong><br><strong><span style="font-size:30px">YOUR PASSWORD?</span></strong></p></div></div></td></tr></tbody></table><table class="m_text_block m_block-3" width="100%" border="0" cellpadding="0" cellspacing="0" role="presentation" style="word-break:break-word"><tbody><tr><td class="m_pad" style="padding-bottom:20px;padding-left:20px;padding-right:20px;padding-top:10px"><div style="font-family:sans-serif"><div style="font-size:12px;font-family:Tahoma,Verdana,Segoe,sans-serif;color:#555;line-height:1.2"><p style="margin:0;font-size:14px;text-align:center"><span style="font-size:16px">Not to worry, we got you! Letâ€™s get you a new password.</span></p></div></div></td></tr></tbody></table><table class="m_button_block m_block-4" width="100%" border="0" cellpadding="10" cellspacing="0" role="presentation">
                <tbody><tr><td class="m_pad"><div class="m_alignment" align="center">
                <a style="text-decoration:none;display:inline-block;color:#ffffff;background-color:#3aaee0;border-radius:4px;width:auto;border-top:0px solid transparent;font-weight:400;border-right:0px solid transparent;border-bottom:0px solid transparent;border-left:0px solid transparent;padding-top:5px;padding-bottom:5px;font-family:Tahoma,Verdana,Segoe,sans-serif;font-size:14px;text-align:center;word-break:keep-all" rel="noreferrer" target="_blank" href="http:/localhost:7777/user/forgotpassword/${verificationString}"><span style="padding-left:20px;padding-right:20px;font-size:14px;display:inline-block;letter-spacing:normal"><span style="word-break:break-word;line-height:28px">RESET PASSWORD</span></span></a>
                </div></td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table><table class="m_row m_row-3" align="center" width="100%" border="0" cellpadding="0" cellspacing="0" role="presentation"><tbody><tr><td><table class="m_row-content m_stack" align="center" border="0" cellpadding="0" cellspacing="0" role="presentation" style="background-color:#fed149;border-radius:0;color:#000;width:600px;margin:0 auto" width="600"><tbody><tr><td class="m_column m_column-1" width="100%" style="font-weight:400;text-align:left;padding-bottom:5px;padding-top:5px;vertical-align:top;border-top:0;border-right:0;border-bottom:0;border-left:0"><table class="m_divider_block m_block-1" width="100%" border="0" cellpadding="10" cellspacing="0" role="presentation"><tbody><tr><td class="m_pad"><div class="m_alignment" align="center"><table border="0" cellpadding="0" cellspacing="0" role="presentation" width="100%"><tbody><tr><td class="m_divider_inner" style="font-size:1px;line-height:1px;border-top:1px solid #bbb"><span>&hairsp;</span></td></tr></tbody></table></div></td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table></td></tr></tbody></table>`
            }

            await sgMail.send(msg)

            response.status(200).json({
                message: "Successfully found email and email sent",
                data: user
            })
        } else {
            response.status(200).json({
                message: "Email Does Not Exist",
                status: "Email Check Failed"
            })
        }
    }catch(error){
        response.status(400).json({
            message: "Email Does Not Exist",
            data: error
        })
    }
})

router.put("/forgotpassword/:id", async (request: express.Request, response: express.Response) => {
    try {
        const user = await User.findOne({username: request.body.username})
        // If user exists
        if(user){
            const timeDifference = Math.abs(new Date().getTime() - user.resetTokenExpiry.getTime() ); // Difference in milliseconds
            const fiveMinutesInMilliseconds = 5 * 60 * 1000; // 5 minutes in milliseconds
            const isMoreThanFiveMinutes = timeDifference > fiveMinutesInMilliseconds;
            if(user.resetToken === request.params.id){
                if(!isMoreThanFiveMinutes){
                    user.resetToken = ""
                    request.body.password = await bcrypt.hash(request.body.password, await bcrypt.genSalt(10))
                    user.password = request.body.password
                    const newUser = await User.findOneAndUpdate({username: request.body.username}, user)
                    response.status(200).json({
                        message: "Password Updated Successfully",
                        status: "Successful Reset",
                        data: newUser
                    })
                } else {
                    // Clears token after failed verification attempt
                    user.resetToken = ""
                    await User.findOneAndUpdate({username: request.body.username}, user)
                    response.status(400).json({
                        message: "Failed Password Reset",
                        status: "resetToken Expired"
                    })

                }
            } else {
                // Clears token after failed verification attempt
                user.resetToken = ""
                await User.findOneAndUpdate({username: request.body.username}, user)
                response.status(400).json({
                    message: "Failed Password Reset",
                    status: "Failed To Verify resetToken"
                })
            }

        } else {
            response.status(400).json({
                message: "Failed To Find User",
                status: "Username Lookup Failed"
            })
        }
        



    }catch (error){
        response.status(400).json({
            message: "Failed To Update Password",
            data: error
        })
    }
})

export default router